var searchIndex = JSON.parse('{\
"imxrt_usbd":{"doc":"A USB driver for i.MX RT processors","t":[3,13,4,13,8,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,13,13,4,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BusAdapter","High","Instance","LowFull","Peripherals","Speed","USB1","USB2","alloc_ep","borrow","borrow","borrow","borrow_gpt","borrow_mut","borrow_mut","borrow_mut","clone","clone","configure","default","enable","enable_zlt","eq","eq","fmt","fmt","from","from","from","gpt","gpt_mut","instance","into","into","into","is_stalled","new","poll","read","reset","resume","set_device_address","set_interrupts","set_stalled","suspend","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_speed","without_critical_sections","write","Gpt","Gpt0","Gpt1","Instance","Mode","OneShot","Repeat","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear_elapsed","clone","clone","eq","eq","fmt","fmt","from","from","from","instance","into","into","into","is_elapsed","is_interrupt_enabled","is_running","load","mode","reset","run","set_interrupt_enabled","set_load","set_mode","stop","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["imxrt_usbd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","imxrt_usbd::gpt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A full- and high-speed <code>UsbBus</code> implementation","High speed.","USB instance identifiers","Throttle to low / full speeds.","A type that owns all USB register blocks","USB low / full / high speed setting.","The first USB register instance","The second USB register instance","","","","","Acquire one of the GPT timer instances.","","","","","","Apply device configurations, and perform other …","","","Enable zero-length termination (ZLT) for the given endpoint","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","USB general purpose timers.","Acquire one of the GPT timer instances.","Returns the instance identifier for the core registers","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a high-speed USB bus adapter","","","","","","Enable (<code>true</code>) or disable (<code>false</code>) interrupts for this USB …","","","","","","","","","","","","Create a USB bus adapter with the given speed","Create a USB bus adapter that never takes a critical …","","General purpose timer (GPT).","The GPT0 timer instance.","The GPT1 timer instance.","GPT instance identifiers.","GPT timer mode.","In one shot mode, the timer will count down to zero, …","In repeat mode, the timer will count down to zero, …","","","","","","","Clear the flag that indicates the timer has elapsed.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the GPT instance identifier.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Indicates if the timer has elapsed.","Indicates if interrupt generation is enabled.","Indicates if the timer is running (<code>true</code>) or stopped (<code>false</code>…","Returns the counter load value.","Returns the timer mode.","Reset the timer.","Run the GPT timer.","Enable or disable interrupt generation when the timer …","Set the counter load value.","Set the timer mode.","Stop the timer.","","","","","","","","",""],"i":[0,12,0,12,0,0,13,13,1,1,12,13,1,1,12,13,12,13,1,12,1,1,12,13,12,13,1,12,13,0,1,17,1,12,13,1,1,1,1,1,1,1,1,1,1,1,12,13,1,12,13,1,12,13,1,1,1,0,10,10,0,0,23,23,22,23,10,22,23,10,22,23,10,23,10,23,10,22,23,10,22,22,23,10,22,22,22,22,22,22,22,22,22,22,22,22,23,10,22,23,10,22,23,10],"f":[0,0,0,0,0,0,0,0,[[1,2,[4,[3]],5,6,7],[[8,[3]]]],[[]],[[]],[[]],[[1,9,10,11]],[[]],[[]],[[]],[12,12],[13,13],[1],[[],12],[1],[[1,3]],[[12,12],14],[[13,13],14],[[12,15],16],[[13,15],16],[[]],[[]],[[]],0,[[1,10,11]],[[],13],[[]],[[]],[[]],[[1,3],14],[17,1],[1,18],[[1,3],[[8,[19]]]],[1],[1],[[1,7]],[[1,14]],[[1,3,14]],[1],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],21],[[],21],[[],21],[[17,12],1],[[17,12],1],[[1,3],[[8,[19]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[22],[23,23],[10,10],[[23,23],14],[[10,10],14],[[23,15],16],[[10,15],16],[[]],[[]],[[]],[22,10],[[]],[[]],[[]],[22,14],[22,14],[22,14],[22,24],[22,23],[22],[22],[[22,14]],[[22,24]],[[22,23]],[22],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],21],[[],21],[[],21]],"p":[[3,"BusAdapter"],[4,"UsbDirection"],[3,"EndpointAddress"],[4,"Option"],[4,"EndpointType"],[15,"u16"],[15,"u8"],[6,"Result"],[3,"CriticalSection"],[4,"Instance"],[8,"FnOnce"],[4,"Speed"],[4,"Instance"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Peripherals"],[4,"PollResult"],[15,"usize"],[4,"Result"],[3,"TypeId"],[3,"Gpt"],[4,"Mode"],[15,"u32"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
